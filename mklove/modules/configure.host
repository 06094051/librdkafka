#!/bin/bash
#
# Host OS support (host to run program on)
# Sets:
#  MKL_DISTRO
#  MKL_HOST
#  MKL_HOST_TYPE
#  MKL_TOOL_PREFIX

# autoconf compatibility - does nothing at this point
mkl_option "Cross-compilation" "mk:MKL_HOST" "--host=HOST" "Configure to build programs to run on HOST"
mkl_option "Cross-compilation" "mk:MKL_BUILD" "--build=BUILD" "Configure for building on BUILD (no-op)"
mkl_option "Cross-compilation" "mk:TARGET" "--target=TARGET" "Configure for building cross-toolkits for platform TARGET (no-op)"

function checks {


    # Cross compilation host (to run program on)
    mkl_check_begin "cross" "" "no-cache" "host type"
    if [[ $MKL_HOST == *mingw[36][24]* ]]; then
        mkl_mkvar_set "cross" MKL_HOST_TYPE win32
        #mkl_mkvar_append "cross" CPPFLAGS "-Wl,--export-all-symbols -Wl,--allow-multiple-definition -Wl,--enable-auto-import -Wl,--whole-archive"
        mkl_mkvar_append "cross" CPPFLAGS "-Wl,--enable-auto-import"
    fi

    if [[ -n $MKL_HOST ]]; then
        mkl_mkvar_set "cross" MKL_CROSS y
        mkl_mkvar_set "cross" MKL_TOOL_PREFIX "$MKL_HOST"-
        mkl_check_done "cross" "" "ignore" "ok" "$MKL_HOST"
    else
        mkl_check_done "cross" "" "ignore" "ok" "local"
    fi



    # Try to figure out what OS/distro we are running on.
    mkl_check_begin "distro" "" "no-cache" "build OS or distribution"

    # Try lsb_release
    local sys
    sys=$(lsb_release -is 2>/dev/null)
    if [[ $? -gt 0 ]]; then
        # That didnt work, try uname.
        local kn=$(uname -s)
        case $kn in
            Linux)
                sys=Linux
                ;;
            Darwin)
                sys=osx
                ;;
            CYGWIN*)
                sys=Cygwin
                ;;
            *)
                sys="$kn"
                ;;
        esac
    fi

    if [[ -z $sys ]]; then
        mkl_check_failed "distro" "" "ignore" ""
    else
        mkl_check_done "distro" "" "ignore" "ok" "$sys"
        mkl_mkvar_set "distro" "MKL_DISTRO" "$sys"
    fi

    if [[ -z $MKL_HOST_TYPE ]]; then
        mkl_mkvar_set "cross" MKL_HOST_TYPE "$MKL_DISTRO"
    fi
}


#function checks {
#    mkl_check_begin "host" "HOST_OS" "no-cache" "host OS"
#
#    #
#    # If --host-os=.. was not specified then this is most likely not a
#    # a cross-compilation and we can base the host-os on the native OS.
#    #
#    if [[ $HOST_OS != "auto" ]]; then
#        mkl_check_done "host" "HOST_OS" "cont" "ok" "$HOST_OS"
#        return 0
#    fi
#
#    kn=$(uname -s)
#    case $kn in
#        Linux)
#            hostos=linux
#            ;;
#        Darwin)
#            hostos=osx
#            ;;
#        CYGWIN*)
#            hostos=cygwin
#            ;;
#        *)
#            hostos="$(mkl_lower $kn)"
#            mkl_err  "Unknown host OS kernel name: $kn"
#            mkl_err0 "  Will attempt to load module host_$hostos anyway."
#            mkl_err0 "  Please consider writing a configure.host_$hostos"
#            ;;
#    esac
#
#    if ! mkl_require --try "host_$hostos"; then
#        # Module not found
#        mkl_check_done "host" "HOST_OS" "cont" "failed" "$kn?"
#    else
#        # Module loaded
#
#        if mkl_func_exists "host_${hostos}_setup" ; then
#            "host_${hostos}_setup"
#        fi
#
#        mkl_check_done "host" "HOST_OS" "cont" "ok" "$hostos"
#    fi
#
#    # Set HOST_OS var even if probing failed.
#    mkl_mkvar_set "host" "HOST_OS" "$hostos"
#}

